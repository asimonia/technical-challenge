def get_char(char):
	"""Returns a terminal character

	char: Alphanumeric character
	"""

	letters = { "A" : 
	(
	"░░░░░",
	"░░██░",
	"░█░░█",
	"░████",
	"░█░░█",
	"░█░░█",
	"░░░░░",
	),
	"B" :
	(
	"░░░░░",
	"░███░",
	"░█░░█",
	"░███░",
	"░█░░█",
	"░███░",
	"░░░░░",
	),
	"C" :
	(
	"░░░░░",
	"░████",
	"░█░░░",
	"░█░░░",
	"░█░░░",
	"░████",
	"░░░░░",
	),
	"D" :
	(
	"░░░░░",
	"░███░",
	"░█░░█",
	"░█░░█",
	"░█░░█",
	"░███░",
	"░░░░░",
	),
	"E" :
	(
	"░░░░░",
	"░████",
	"░█░░░",
	"░████",
	"░█░░░",
	"░████",
	"░░░░░",
	),
	"F" :
	(
	"░░░░░",
	"░████",
	"░█░░░",
	"░███░",
	"░█░░░",
	"░█░░░",
	"░░░░░",
	),
	"G" :
	(
	"░░░░░",
	"░███░",
	"░█░░░",
	"░█░██",
	"░█░░█",
	"░████",
	"░░░░░",
	),
	"H" :
	(
	"░░░░░",
	"░█░░█",
	"░█░░█",
	"░████",
	"░█░░█",
	"░█░░█",
	"░░░░░",
	),
	"I" :
	(
	"░░░░░",
	"░████",
	"░░██░",
	"░░██░",
	"░░██░",
	"░████",
	"░░░░░",
	),
	"J" :
	(
	"░░░░░",
	"░████",
	"░░░█░",
	"░░░█░",
	"░█░█░",
	"░███░",
	"░░░░░",
	),
	"K" :
	(
	"░░░░░",
	"░█░░█",
	"░█░█░",
	"░██░░",
	"░█░█░",
	"░█░░█",
	"░░░░░",
	),
	"L" :
	(
	"░░░░░",
	"░█░░░",
	"░█░░░",
	"░█░░░",
	"░█░░░",
	"░████",
	"░░░░░",
	),
	"M" :
	(
	"░░░░░",
	"██░██",
	"█░█░█",
	"█░█░█",
	"█░░░█",
	"█░░░█",
	"░░░░░",
	),
	"N" :
	(
	"░░░░░",
	"█░░░█",
	"██░░█",
	"█░█░█",
	"█░░██",
	"█░░░█",
	"░░░░░",
	),
	"O" :
	(
	"░░░░░",
	"░████",
	"░█░░█",
	"░█░░█",
	"░█░░█",
	"░████",
	"░░░░░",
	),
	"P" :
	(
	"░░░░░",
	"░████",
	"░█░░█",
	"░████",
	"░█░░░",
	"░█░░░",
	"░░░░░",
	),
	"Q" :
	(
	"░░░░░",
	"░░██░",
	"░█░░█",
	"░█░░█",
	"░░██░",
	"░░░██",
	"░░░░░",
	),
	"R" :
	(
	"░░░░░",
	"░████",
	"░█░░█",
	"░███░",
	"░█░█░",
	"░█░░█",
	"░░░░░",
	),
	"S" :
	(
	"░░░░░",
	"░████",
	"░█░░░",
	"░████",
	"░░░░█",
	"░████",
	"░░░░░",
	),
	"T" :
	(
	"░░░░░",
	"░████",
	"░░██░",
	"░░██░",
	"░░██░",
	"░░██░",
	"░░░░░",
	),
	"U" :
	(
	"░░░░░",
	"░█░░█",
	"░█░░█",
	"░█░░█",
	"░█░░█",
	"░████",
	"░░░░░",
	),
	"V" :
	(
	"░░░░░",
	"░█░░█",
	"░█░░█",
	"░█░░█",
	"░░██░",
	"░░██░",
	"░░░░░",
	),
	"W" :
	(
	"░░░░░░",
	"░█░░░█",
	"░█░░░█",
	"░█░█░█",
	"░█░█░█",
	"░░█░█░",
	"░░░░░░",
	),
	"X" :
	(
	"░░░░░",
	"░█░░█",
	"░░██░",
	"░░██░",
	"░░██░",
	"░█░░█",
	"░░░░░",
	),
	"Y" :
	(
	"░░░░░",
	"░█░░█",
	"░░██░",
	"░░██░",
	"░░██░",
	"░░██░",
	"░░░░░",
	),
	"Z" :
	(
	"░░░░░",
	"░████",
	"░░░█░",
	"░░█░░",
	"░█░░░",
	"░████",
	"░░░░░",
	),
	"1" :
	(
	"░░░░░",
	"░██░░",
	"░░█░░",
	"░░█░░",
	"░░█░░",
	"░███░",
	"░░░░░",
	),
	"2" :
	(
	"░░░░░",
	"░███░",
	"░░░█░",
	"░░█░░",
	"░█░░░",
	"░███░",
	"░░░░░",
	),
	"3" :
	(
	"░░░░░",
	"░███░",
	"░░░█░",
	"░███░",
	"░░░█░",
	"░███░",
	"░░░░░",
	),
	"4" :
	(
	"░░░░░",
	"░░██░",
	"░█░█░",
	"░████",
	"░░░█░",
	"░░░█░",
	"░░░░░",
	),
	"5" :
	(
	"░░░░░",
	"░████",
	"░█░░░",
	"░███░",
	"░░░░█",
	"░███░",
	"░░░░░",
	),
	"6" :
	(
	"░░░░░",
	"░████",
	"░█░░░",
	"░███░",
	"░█░░█",
	"░███░",
	"░░░░░",
	),
	"7" :
	(
	"░░░░░",
	"░████",
	"░░░░█",
	"░░░█░",
	"░░█░░",
	"░█░░░",
	"░░░░░",
	),
	"8" :
	(
	"░░░░░",
	"░░██░",
	"░█░░█",
	"░░██░",
	"░█░░█",
	"░░██░",
	"░░░░░",
	),
	"9" :
	(
	"░░░░░",
	"░░██░",
	"░█░░█",
	"░░██░",
	"░░░█░",
	"░███░",
	"░░░░░",
	),
	"0" :
	(
	"░░░░░",
	"░░███",
	"░█░░█",
	"░█░░█",
	"░█░░█",
	"░░███",
	"░░░░░",
	)
	}

	return letters[char]


if __name__ == '__main__':

	while True:
		# Get input from user
		parser = input("Enter an alphanumeric combination (0 - 100 characters): ")

		# Build a phrase from each alphanumeric
		phrase = []
		for char in parser:
			phrase.append(get_char(char))

		# Concatenate and print each line of text onscreen
		for row in range(7):
			line = []
			for char in phrase:
				line.append(char[row])
			print(''.join(line))